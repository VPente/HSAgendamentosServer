//#region SCHEMA CONFIG
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//#endregion

//#region TOKEN
model Token {
  id      String  @id @unique @default(nanoid(12))
  token   String  @unique
  hasUsed Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tokens")
}

//#endregion

//#region USER
model User {
  id          String  @id @unique @default(nanoid(12))
  name        String
  email       String  @unique
  image       String?
  password    String
  phoneNumber String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accesses UserAccess[]
  salons   SalonProfessional[]

  @@map("users")
}

model UserAccess {
  id     String @id @unique @default(nanoid(12))
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("userAccesses")
}

//#endregion

//#region ORGANIZATION

//#region ORGANIZATION PERMISSIONS
enum permissions {
  hairdresser
  manicure
  admin
}

model SalonUserPermission {
  id          String      @id @unique @default(nanoid(12))
  salonUserId String
  permission  permissions

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  salonUser SalonProfessional @relation(fields: [salonUserId], references: [id], onDelete: Cascade)

  @@map("salonUserPermissions")
}

//#endregion

model SalonProfessional {
  id      String @id @unique @default(nanoid(12))
  salonId String
  userId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  salon                Salon                 @relation(fields: [salonId], references: [id], onDelete: Cascade)
  user                 User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  salonUserPermissions SalonUserPermission[]

  @@map("salonUsers")
}

model Salon {
  id           String  @id @unique @default(nanoid(12))
  name         String  @unique
  description  String?
  city         String
  phoneNumber  String
  address      String
  documentCode String  @unique
  bannerImage  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  salonProfessionals SalonProfessional[]

  @@map("salons")
}

//#region PROCEDURES

model Procedure {
  id          String  @id @unique @default(nanoid(12))
  name        String
  description String?
  price       Float // ou String
  duration    Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("procedures")
}

//#endregion
//#region TIMETABLE
model Timetable {
  id        String @id @unique @default(nanoid(12))
  salonId   String
  startDate String
  endDate   String
  startTime String
  endTime   String

  //dayOfWeek Int

  //openAt    String
  //closeAt   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("timetables")
}

//#endregion

//#endregion
